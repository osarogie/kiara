generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model comments {
  id            Int       @id @default(autoincrement())
  body          String?
  parent_id     Int?      @default(0)
  level         Int?      @default(0)
  discussion_id Int?
  user_id       Int?
  photo_id      Int?
  created_at    DateTime? @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)

  @@index([discussion_id], name: "index_comments_on_discussion_id")
  @@index([parent_id], name: "index_comments_on_parent_id")
  @@index([photo_id], name: "index_comments_on_photo_id")
  @@index([user_id], name: "index_comments_on_user_id")
}

model connections {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  friend_id  Int?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)

  @@index([friend_id], name: "index_connections_on_friend_id")
  @@index([user_id], name: "index_connections_on_user_id")
}

model delayed_jobs {
  id         Int       @id @default(autoincrement())
  priority   Int       @default(0)
  attempts   Int       @default(0)
  handler    String
  last_error String?
  run_at     DateTime? @db.Timestamp(6)
  locked_at  DateTime? @db.Timestamp(6)
  failed_at  DateTime? @db.Timestamp(6)
  locked_by  String?   @db.VarChar
  queue      String?   @db.VarChar
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)

  @@index([priority, run_at], name: "delayed_jobs_priority")
}

model discussion_options {
  id            Int       @id @default(autoincrement())
  title         String?   @db.VarChar
  discussion_id Int?
  created_at    DateTime? @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)

  @@index([discussion_id], name: "index_discussion_options_on_discussion_id")
}

model discussions {
  id          Int        @id @default(autoincrement())
  name        String?    @db.VarChar
  body        String?
  reads       Int?       @default(0)
  user_id     Int?       @default(0)
  group_id    Int?       @default(0)
  created_at  DateTime?  @db.Timestamp(6)
  updated_at  DateTime?  @db.Timestamp(6)
  photo_id    Int?
  poll_close  DateTime?  @db.Timestamp(6)
  hide_poll   Boolean?   @default(false)
  permalink   String?    @db.VarChar
  has_polls   Boolean?   @default(false)
  local_poll  Boolean?   @default(false)
  published   Boolean?
  pulished_at Boolean?
  content     Json?
  tag_rels    tag_rels[]

  @@index([content], name: "index_discussions_on_content")
  @@index([group_id], name: "index_discussions_on_group_id")
  @@index([photo_id], name: "index_discussions_on_photo_id")
  @@index([user_id], name: "index_discussions_on_user_id")
}

model groups {
  id              Int       @id @default(autoincrement())
  name            String?   @db.VarChar
  body            String?
  private         Boolean?  @default(false)
  user_id         Int?
  created_at      DateTime? @db.Timestamp(6)
  updated_at      DateTime? @db.Timestamp(6)
  cover_photo     String?   @db.VarChar
  header_image_id Int?
  permalink       String?   @db.VarChar
  tagline         String?   @db.VarChar
  has_domain      Boolean?  @default(false)
  custom_domain   String?   @db.VarChar
  color_scheme    Json?

  @@index([header_image_id], name: "index_groups_on_header_image_id")
  @@index([user_id], name: "index_groups_on_user_id")
}

model likes {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  discussion_id Int?
  comment_id    Int?
  created_at    DateTime? @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)
  value         Int?

  @@index([comment_id], name: "index_likes_on_comment_id")
  @@index([discussion_id], name: "index_likes_on_discussion_id")
  @@index([user_id], name: "index_likes_on_user_id")
}

model memberships {
  id         Int       @id @default(autoincrement())
  group_id   Int?
  user_id    Int?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  admin      Boolean   @default(false)

  @@index([group_id], name: "index_memberships_on_group_id")
  @@index([user_id], name: "index_memberships_on_user_id")
}

model message_recipients {
  id                Int       @id @default(autoincrement())
  user_id           Int?
  message_thread_id Int?
  unread            Int?      @default(0)
  created_at        DateTime? @db.Timestamp(6)
  updated_at        DateTime? @db.Timestamp(6)

  @@index([message_thread_id], name: "index_message_recipients_on_message_thread_id")
  @@index([user_id], name: "index_message_recipients_on_user_id")
}

model messages {
  id                Int       @id @default(autoincrement())
  user_id           Int?
  message_thread_id Int?
  body              String?
  attachments       String[]
  created_at        DateTime? @db.Timestamp(6)
  updated_at        DateTime? @db.Timestamp(6)
  otherId           String?   @map("_id") @db.VarChar

  @@index([attachments], name: "index_messages_on_attachments")
  @@index([message_thread_id], name: "index_messages_on_message_thread_id")
  @@index([user_id], name: "index_messages_on_user_id")
}

model message_threads {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  is_open    Boolean?  @default(false)
  name       String?   @db.VarChar
  is_group   Boolean?  @default(false)

  @@index([user_id], name: "index_message_threads_on_user_id")
}

model notifications {
  id             Int       @id @default(autoincrement())
  notice_type    Int?
  user_id        Int?
  notified_by_id Int?
  discussion_id  Int?
  comment_id     Int?
  group_id       Int?
  connection_id  Int?
  read           Boolean?  @default(false)
  created_at     DateTime? @db.Timestamp(6)
  updated_at     DateTime? @db.Timestamp(6)

  @@index([comment_id], name: "index_notifications_on_comment_id")
  @@index([connection_id], name: "index_notifications_on_connection_id")
  @@index([discussion_id], name: "index_notifications_on_discussion_id")
  @@index([group_id], name: "index_notifications_on_group_id")
  @@index([notified_by_id], name: "index_notifications_on_notified_by_id")
  @@index([user_id], name: "index_notifications_on_user_id")
}

model photos {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  url        String?   @db.VarChar
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  width      Int?
  height     Int?

  @@index([user_id], name: "index_photos_on_user_id")
}

model schema_migrations {
  version String @id @db.VarChar
}

model sessions {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  api_key    String?
  device     String?   @db.VarChar
  last_seen  DateTime? @db.Date
  created_at DateTime  @db.Timestamp(6)
  updated_at DateTime  @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id])

  @@index([user_id], name: "index_sessions_on_user_id")
}

model tag_rels {
  id            Int          @id @default(autoincrement())
  discussion_id Int?
  tag_id        Int?
  created_at    DateTime     @db.Timestamp(6)
  updated_at    DateTime     @db.Timestamp(6)
  discussions   discussions? @relation(fields: [discussion_id], references: [id])
  tags          tags?        @relation(fields: [tag_id], references: [id])

  @@index([discussion_id], name: "index_tag_rels_on_discussion_id")
  @@index([tag_id], name: "index_tag_rels_on_tag_id")
}

model tags {
  id         Int        @id @default(autoincrement())
  name       String?    @db.VarChar
  body       String?
  created_at DateTime   @db.Timestamp(6)
  updated_at DateTime   @db.Timestamp(6)
  tag_rels   tag_rels[]
}

model users {
  id              Int        @id @default(autoincrement())
  username        String?    @db.VarChar
  email           String?    @db.VarChar
  name            String?    @db.VarChar
  bio             String?
  followers       Int?       @default(0)
  followings      Int?       @default(0)
  profile_pic     String?    @db.VarChar
  gender          String?    @db.VarChar
  active          Boolean?   @default(true)
  created_at      DateTime?  @db.Timestamp(6)
  updated_at      DateTime?  @db.Timestamp(6)
  password_digest String?    @db.VarChar
  email_confirmed Boolean?   @default(false)
  confirm_token   String?    @db.VarChar
  reset_token     String?    @db.VarChar
  sessions        sessions[]
}

model votes {
  id                   Int       @id @default(autoincrement())
  user_id              Int?
  discussion_option_id Int?
  created_at           DateTime? @db.Timestamp(6)
  updated_at           DateTime? @db.Timestamp(6)

  @@unique([discussion_option_id, user_id], name: "index_votes_on_discussion_option_id_and_user_id")
  @@index([discussion_option_id], name: "index_votes_on_discussion_option_id")
  @@index([user_id], name: "index_votes_on_user_id")
}
